  ADDR  |  HEX  |      BINARY      |  LN  |  ASSEMBLY
        |       |                  |    1 | .ORIG x3000
        |       |                  |    2 | ; Reading the first number
 x3000  | x480F | 0100100000001111 |    3 | JSR READ_BINARY
 x3001  | x3C48 | 0011110001001000 |    4 | ST R6, FIRST_NUMBER ; Storing the first number
 x3002  | x2046 | 0010000001000110 |    5 | LD R0, CURRENT_Z ; Increasing Z
 x3003  | x1021 | 0001000000100001 |    6 | ADD R0, R0, #1
 x3004  | x3044 | 0011000001000100 |    7 | ST R0, CURRENT_Z
        |       |                  |    8 | ; Reading the second number
 x3005  | x480A | 0100100000001010 |    9 | JSR READ_BINARY
 x3006  | x3C44 | 0011110001000100 |   10 | ST R6, SECOND_NUMBER ; Storing second number
 x3007  | x2041 | 0010000001000001 |   11 | LD R0, CURRENT_Z ; Increasing Z
 x3008  | x1021 | 0001000000100001 |   12 | ADD R0, R0, #1
 x3009  | x303F | 0011000000111111 |   13 | ST R0, CURRENT_Z
        |       |                  |   14 | 
        |       |                  |   15 | ; Getting the total for the write binary addition
 x300A  | x5020 | 0101000000100000 |   16 | AND R0, R0, #0
 x300B  | x203E | 0010000000111110 |   17 | LD R0, FIRST_NUMBER
 x300C  | x223E | 0010001000111110 |   18 | LD R1, SECOND_NUMBER
 x300D  | x1001 | 0001000000000001 |   19 | ADD R0, R0, R1
 x300E  | x4816 | 0100100000010110 |   20 | JSR WRITE_BINARY_ADDITION
        |       |                  |   21 | ;TRAP 0x36
 x300F  | xF025 | 1111000000100101 |   22 | HALT
        |       |                  |   23 | ; R5 -> Be the iterator from 1-16
        |       |                  |   24 | ; R5 -> Be the base that doubles for every iteration
        |       |                  |   25 | ; R6 -> Be the total that is added to calculate the binary
        |       |                  |   26 | READ_BINARY
        |       |                  |   27 |     ; Getting Player Position, stored in R0, R1, R2
 x3010  | xF031 | 1111000000110001 |   28 |     TRAP 0x31
        |       |                  |   29 |     ; Resetting needed regisiters
 x3011  | x5DA0 | 0101110110100000 |   30 |     AND R6, R6, #0
        |       |                  |   31 |     ; Setting up iterator
 x3012  | x5920 | 0101100100100000 |   32 |     AND R4, R4, #0
 x3013  | x1921 | 0001100100100001 |   33 |     ADD R4, R4, #1
 x3014  | x2A34 | 0010101000110100 |   34 |     LD R5, CURRENT_Z
        |       |                  |   35 |     ; Adjusting to start reading the binary
 x3015  | x1021 | 0001000000100001 |   36 |     ADD R0, R0, #1
 x3016  | x1485 | 0001010010000101 |   37 |     ADD R2, R2, R5
        |       |                  |   38 |     ; This should start reading from [player_pos_x + 1, player_pos_y, player_pos_z + current_z]
        |       |                  |   39 |     ; Resetting R5 so it can be used and setting it up to be doubled
 x3017  | x5B60 | 0101101101100000 |   40 |     AND R5, R5, #0
 x3018  | x1B61 | 0001101101100001 |   41 |     ADD R5, R5, #1
        |       |                  |   42 | 
        |       |                  |   43 |     read_loop
 x3019  | x56E0 | 0101011011100000 |   44 |         AND R3, R3, #0
 x301A  | x1730 | 0001011100110000 |   45 |         ADD R3, R4, #-16
 x301B  | x0608 | 0000011000001000 |   46 |         BRzp EXIT
 x301C  | xF033 | 1111000000110011 |   47 |         TRAP 0x33 ; Stores the block id in R3
 x301D  | x16E0 | 0001011011100000 |   48 |         ADD R3, R3, #0 ; enable comparisons
 x301E  | x0401 | 0000010000000001 |   49 |         BRz ISZERO
 x301F  | x1D85 | 0001110110000101 |   50 |         ADD R6, R6, R5
        |       |                  |   51 |         ISZERO
 x3020  | x1B45 | 0001101101000101 |   52 |         ADD R5, R5, R5
 x3021  | x1921 | 0001100100100001 |   53 |         ADD R4, R4, #1
 x3022  | x1021 | 0001000000100001 |   54 |         ADD R0, R0, #1
        |       |                  |   55 |         
 x3023  | x0FF5 | 0000111111110101 |   56 |         BR read_loop
        |       |                  |   57 |     EXIT
 x3024  | xC1C0 | 1100000111000000 |   58 |     RET
        |       |                  |   59 |             
        |       |                  |   60 | WRITE_BINARY_ADDITION
        |       |                  |   61 |     ; Resetting registers
 x3025  | x5260 | 0101001001100000 |   62 |     AND R1, R1, #0
 x3026  | x54A0 | 0101010010100000 |   63 |     AND R2, R2, #0
 x3027  | x5920 | 0101100100100000 |   64 |     AND R4, R4, #0
        |       |                  |   65 |     ; Binary loop for each iteration take the remainder as this is the least bit which we output in minecraft
        |       |                  |   66 |     LOOP_1 
 x3028  | x1020 | 0001000000100000 |   67 |         ADD R0, R0, #0 ; enable comparisions
        |       |                  |   68 |         ; calling the subroutine
        |       |                  |   69 |         ; R1 -> The quotient
        |       |                  |   70 |         ; R2 -> The remainder
 x3029  | x5260 | 0101001001100000 |   71 |         AND R1, R1, #0 ; prepping quotient
 x302A  | x54A0 | 0101010010100000 |   72 |         AND R2, R2, #0 ; prepping remainder
 x302B  | x56E0 | 0101011011100000 |   73 |         AND R3, R3, #0 ; prepping temp
 x302C  | x1620 | 0001011000100000 |   74 |         ADD R3, R0, #0 ; setting temp = x
        |       |                  |   75 |         ; loops until it divides by 2
        |       |                  |   76 |         div_loop
 x302D  | x16FE | 0001011011111110 |   77 |             ADD R3, R3, #-2 ; dividing by 2
 x302E  | x0802 | 0000100000000010 |   78 |             BRn EXIT_LOOP_2 ; exits if the temp is negative
 x302F  | x1261 | 0001001001100001 |   79 |             ADD R1, R1, #1 ; adding to the quotient
 x3030  | x07FC | 0000011111111100 |   80 |             BRzp div_loop
        |       |                  |   81 |         EXIT_LOOP_2
 x3031  | x14E2 | 0001010011100010 |   82 |         ADD R2, R3, #2 ; fixing up some issues here
        |       |                  |   83 |         ; Storing temp values for quotient and remainder to work with the traps
        |       |                  |   84 |         ; Quotient
 x3032  | x5B60 | 0101101101100000 |   85 |         AND R5, R5, #0
 x3033  | x1A60 | 0001101001100000 |   86 |         ADD R5, R1, #0
        |       |                  |   87 |         ; Remainder
 x3034  | x5DA0 | 0101110110100000 |   88 |         AND R6, R6, #0
 x3035  | x1CA0 | 0001110010100000 |   89 |         ADD R6, R2, #0
 x3036  | xF036 | 1111000000110110 |   90 |         TRAP 0x36
        |       |                  |   91 |         ; using temp for the iterator
 x3037  | x56E0 | 0101011011100000 |   92 |         AND R3, R3, #0
 x3038  | x1730 | 0001011100110000 |   93 |         ADD R3, R4, #-16
 x3039  | x040E | 0000010000001110 |   94 |         BRz ENDLOOP
 x303A  | x1921 | 0001100100100001 |   95 |         ADD R4, R4, #1
        |       |                  |   96 |         ; This will reset R0, R1, R2
 x303B  | x5020 | 0101000000100000 |   97 |         AND R0, R0, #0
 x303C  | x5260 | 0101001001100000 |   98 |         AND R1, R1, #0
 x303D  | x54A0 | 0101010010100000 |   99 |         AND R2, R2, #0
        |       |                  |  100 |         ; Getting the players position and storing them in their respective registers
 x303E  | xF031 | 1111000000110001 |  101 |         TRAP 0x31
 x303F  | x1004 | 0001000000000100 |  102 |         ADD R0, R0, R4 ; adding to the players x position 
 x3040  | x2608 | 0010011000001000 |  103 |         LD R3, CURRENT_Z
 x3041  | x1483 | 0001010010000011 |  104 |         ADD R2, R2, R3
 x3042  | x56E0 | 0101011011100000 |  105 |         AND R3, R3, #0 ; resetting R3 Value
 x3043  | x16C6 | 0001011011000110 |  106 |         ADD R3, R3, R6; Making the block ID whatever the remainder is
 x3044  | xF034 | 1111000000110100 |  107 |         TRAP 0x34 ; Placing the blocks
        |       |                  |  108 |         ; Resetting and setting values for the loop
 x3045  | x5020 | 0101000000100000 |  109 |         AND R0, R0, #0
 x3046  | x1160 | 0001000101100000 |  110 |         ADD R0, R5, #0 ; setting the current x value to quotient
 x3047  | x0FE0 | 0000111111100000 |  111 |         BRnzp LOOP_1
        |       |                  |  112 | 
        |       |                  |  113 |     ENDLOOP
 x3048  | xC1C0 | 1100000111000000 |  114 |     RET
        |       |                  |  115 | 
 x3049  | x0001 | 0000000000000001 |  116 | CURRENT_Z .FILL #1
 x304A  | x0000 | 0000000000000000 |  117 | FIRST_NUMBER .FILL #0
 x304B  | x0000 | 0000000000000000 |  118 | SECOND_NUMBER .FILL #0
 x304C  | x0000 | 0000000000000000 |  119 | THIRD_NUMBER .FILL #0
        |       |                  |  120 | .END
